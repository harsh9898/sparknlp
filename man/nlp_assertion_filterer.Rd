% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assertion_filterer.R
\name{nlp_assertion_filterer}
\alias{nlp_assertion_filterer}
\title{Spark NLP AssertionFilterer}
\usage{
nlp_assertion_filterer(
  x,
  input_cols,
  output_col,
  criteria = NULL,
  whitelist = NULL,
  regex = NULL,
  uid = random_string("assertion_filterer_")
)
}
\arguments{
\item{x}{A \code{spark_connection}, \code{ml_pipeline}, or a \code{tbl_spark}.}

\item{input_cols}{Input columns. String array.}

\item{output_col}{Output column. String.}

\item{criteria}{isin or regex}

\item{whitelist}{If defined, list of entities to process.}

\item{regex}{If defined, list of entities to process.}

\item{uid}{A character string used to uniquely identify the ML estimator.}
}
\value{
The object returned depends on the class of \code{x}.

\itemize{
\item \code{spark_connection}: When \code{x} is a \code{spark_connection}, the function returns an instance of a \code{ml_estimator} object. The object contains a pointer to
a Spark \code{Estimator} object and can be used to compose
\code{Pipeline} objects.

\item \code{ml_pipeline}: When \code{x} is a \code{ml_pipeline}, the function returns a \code{ml_pipeline} with
the NLP estimator appended to the pipeline.

\item \code{tbl_spark}: When \code{x} is a \code{tbl_spark}, an estimator is constructed then
immediately fit with the input \code{tbl_spark}, returning an NLP model.
}
}
\description{
Spark ML transformer that will allow you to filter out the named entities by
the list of acceptable assertion statuses. This annotator would be quite handy
if you want to set a white list for the acceptable assertion statuses like
present or conditional; and do not want absent conditions get out of your pipeline.
See \url{https://nlp.johnsnowlabs.com/docs/en/licensed_release_notes#3-assertionfilterer}
}
