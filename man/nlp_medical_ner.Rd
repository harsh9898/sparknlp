% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/medical-ner.R
\name{nlp_medical_ner}
\alias{nlp_medical_ner}
\title{Spark NLP MedicalNerModel Named Entity Recognition Deep Learning annotator}
\usage{
nlp_medical_ner(
  x,
  input_cols,
  output_col,
  label_col = NULL,
  max_epochs = NULL,
  lr = NULL,
  po = NULL,
  batch_size = NULL,
  dropout = NULL,
  verbose = NULL,
  include_confidence = NULL,
  random_seed = NULL,
  graph_folder = NULL,
  validation_split = NULL,
  eval_log_extended = NULL,
  enable_output_logs = NULL,
  output_logs_path = NULL,
  enable_memory_optimizer = NULL,
  pretrained_model_path = NULL,
  override_existing_tags = NULL,
  tags_mapping = NULL,
  test_dataset = NULL,
  use_contrib = NULL,
  log_prefix = NULL,
  include_all_confidence_scores = NULL,
  graph_file = NULL,
  uid = random_string("medical_ner_")
)
}
\arguments{
\item{x}{A \code{spark_connection}, \code{ml_pipeline}, or a \code{tbl_spark}.}

\item{input_cols}{Input columns. String array.}

\item{output_col}{Output column. String.}

\item{label_col}{If DatasetPath is not provided, this seq of Annotation type of column should have labeled data per token (string)}

\item{max_epochs}{Maximum number of epochs to train (integer)}

\item{lr}{Initial learning rate (float)}

\item{po}{Learning rate decay coefficient. Real Learning Rate: lr / (1 + po * epoch) (float)}

\item{batch_size}{Batch size for training (integer)}

\item{dropout}{Dropout coefficient (float)}

\item{verbose}{Verbosity level (integer)}

\item{include_confidence}{whether to include confidence values (boolean)}

\item{random_seed}{Random seed (integer)}

\item{graph_folder}{folder path that contain external graph files}

\item{validation_split}{proportion of the data to use for validation (float)}

\item{eval_log_extended}{whether logs for validation to be extended: it displays time and evaluation of each label. (boolean)}

\item{enable_output_logs}{whether to enable the TensorFlow output logs (boolean)}

\item{output_logs_path}{path for the output logs}

\item{enable_memory_optimizer}{allow training NerDLApproach on a dataset larger than the memory}

\item{pretrained_model_path}{set the location of an already trained MedicalNerModel, which is used as a starting point for training the new model.}

\item{override_existing_tags}{controls whether to override already learned tags when using a pretrained model to initialize the new model.}

\item{tags_mapping}{a string list specifying how old tags are mapped to new ones. (e.g. c("B-PER,B-VIP", "I-PER,I-VIP"))}

\item{test_dataset}{path to test dataset}

\item{use_contrib}{whether to use contrib LSTM cells}

\item{log_prefix}{a string prefix to be included in the logs}

\item{include_all_confidence_scores}{whether to include confidence scores in annotation metadata}

\item{graph_file}{Folder path that contain external graph files}

\item{uid}{A character string used to uniquely identify the ML estimator.}
}
\value{
The object returned depends on the class of \code{x}.

\itemize{
\item \code{spark_connection}: When \code{x} is a \code{spark_connection}, the function returns an instance of a \code{ml_estimator} object. The object contains a pointer to
a Spark \code{Estimator} object and can be used to compose
\code{Pipeline} objects.

\item \code{ml_pipeline}: When \code{x} is a \code{ml_pipeline}, the function returns a \code{ml_pipeline} with
the NLP estimator appended to the pipeline.

\item \code{tbl_spark}: When \code{x} is a \code{tbl_spark}, an estimator is constructed then
immediately fit with the input \code{tbl_spark}, returning an NLP model.
}

When \code{x} is a \code{spark_connection} the function returns a NerDLApproach estimator.
When \code{x} is a \code{ml_pipeline} the pipeline with the NerDLApproach added. When \code{x}
is a \code{tbl_spark} a transformed \code{tbl_spark}  (note that the Dataframe passed in must have the input_cols specified).
}
\description{
This Named Entity recognition annotator allows to train generic NER model based on Neural Networks.
Its train data (train_ner) is either a labeled or an external CoNLL 2003 IOB based spark dataset with Annotations
columns. Also the user has to provide word embeddings annotation column.
}
\details{
Neural Network architecture is Char CNNs - BiLSTM - CRF that achieves state-of-the-art in most datasets.
See \url{https://nlp.johnsnowlabs.com/docs/en/annotators#ner-dl}
}
